/* You can add global styles to this file, and also import other style files */

/* Imported for customize/extend bootstrap variables and utilities before it's computed */
@import 'bootstrap/scss/functions';
@import 'bootstrap/scss/variables';
@import 'bootstrap/scss/variables-dark';
@import 'bootstrap/scss/maps';
@import 'bootstrap/scss/mixins';
@import 'bootstrap/scss/utilities';

/* Custom container size */
$container-max-widths: (
  sm: 720px,
  md: 960px,
  lg: 1140px,
  xl: 1145px,
  xxl: 1320px
);

/* Custom css variables */
:root {
  // default image cropper outline color
  --cropper-outline-color: rgba(0, 0, 0, 0.9);
  // default image cropper overlay color
  --cropper-overlay-color: rgba(255, 255, 255, 1);
}

/* Add custom is-pending state for forms input validation */
$form-validation-states: map-merge(
  $form-validation-states,
  (
    'pending': (
      'color': #838383,
      'icon': '',
      'tooltip-color': #fff,
      'tooltip-bg-color': #838383,
      'focus-box-shadow': 0 0 $input-btn-focus-blur $input-focus-width
        rgba(131, 131, 131, $input-btn-focus-color-opacity),
      'border-color': #838383
    )
  )
);

/* Importing Bootstrap files */
@import 'bootstrap/scss/bootstrap'; //base bootstrap

// @import '../src/assets/scss/validation.scss';

/* Importing FontAwesome classes */
// @import '@fortawesome/fontawesome-free/css/all.css';
$fa-font-path: '@fortawesome/fontawesome-free/webfonts';
@import '@fortawesome/fontawesome-free/scss/fontawesome';
@import '@fortawesome/fontawesome-free/scss/solid';
@import '@fortawesome/fontawesome-free/scss/regular';
@import '@fortawesome/fontawesome-free/scss/brands';

/* Importing HeliPopper files (for tooltips and popovers) */
@import 'tippy.js/dist/tippy.css';
@import 'tippy.js/themes/material.css';
@import 'tippy.js/animations/scale.css';

/* Importing codicons */
@import '@vscode/codicons/dist/codicon.css';

/* Importing GLSP files (for sprotty diagrams) */
@import '@eclipse-glsp/client/css/autocomplete-palette.css';
@import '@eclipse-glsp/client/css/change-bounds.css';
@import '@eclipse-glsp/client/css/command-palette.css';
@import '@eclipse-glsp/client/css/debug.css';
@import '@eclipse-glsp/client/css/decoration.css';
@import '@eclipse-glsp/client/css/ghost-element.css';
@import '@eclipse-glsp/client/css/glsp-sprotty.css';
@import '@eclipse-glsp/client/css/grid.css';
@import '@eclipse-glsp/client/css/helper-lines.css';
@import '@eclipse-glsp/client/css/key-shortcut.css';
@import '@eclipse-glsp/client/css/keyboard-tool-palette.css';
@import '@eclipse-glsp/client/css/keyboard.css';
@import '@eclipse-glsp/client/css/navigation.css';
@import '@eclipse-glsp/client/css/status-overlay.css';
@import '@eclipse-glsp/client/css/toast.css';
@import '@eclipse-glsp/client/css/tool-palette.css';

/* Importing Dynamic GLSP files and customized version */
@import '@dynamic-glsp/client/css/dynamic-glsp.css';
@import 'assets/scss/dynamic-glsp.scss';

/* Button style based on the theme
  If the theme is light, the button will have the btn-light class
  If the theme is dark, the button will have the btn-dark class
  Apply for btn-outline too
*/
.btn.btn-theme {
  @extend .btn-light;

  html[data-bs-theme='dark'] & {
    @extend .btn-dark;
  }
}

.btn.btn-oposite-theme {
  @extend .btn-dark;

  html[data-bs-theme='dark'] & {
    @extend .btn-light;
  }
}

.btn.btn-outline-theme {
  @extend .btn-outline-light;

  html[data-bs-theme='dark'] & {
    @extend .btn-outline-dark;
  }
}

.btn.btn-outline-oposite-theme {
  @extend .btn-outline-dark;

  html[data-bs-theme='dark'] & {
    @extend .btn-outline-light;
  }
}

/* Image Thumbnail mixin: for include as content of other classes */
@mixin img-thumbnail {
  padding: $thumbnail-padding;
  background-color: $thumbnail-bg;
  border: $thumbnail-border-width solid $thumbnail-border-color;
  @include border-radius($thumbnail-border-radius);
  @include box-shadow($thumbnail-box-shadow);

  // Keep them at most 100% wide
  @include img-fluid();
}

/* Enable responsive for borders */
$utilities: map-merge(
  $utilities,
  (
    'border': map-merge(
        map-get($utilities, 'border'),
        (
          responsive: true
        )
      ),
    'border-start': map-merge(
        map-get($utilities, 'border-start'),
        (
          responsive: true
        )
      ),
    'border-end': map-merge(
        map-get($utilities, 'border-end'),
        (
          responsive: true
        )
      ),
    'border-top': map-merge(
        map-get($utilities, 'border-top'),
        (
          responsive: true
        )
      ),
    'border-bottom': map-merge(
        map-get($utilities, 'border-bottom'),
        (
          responsive: true
        )
      )
  )
);

/* Enable responsive for rounded */
$utilities: map-merge(
  $utilities,
  (
    'rounded': map-merge(
        map-get($utilities, 'rounded'),
        (
          responsive: true
        )
      ),
    'rounded-start': map-merge(
        map-get($utilities, 'rounded-start'),
        (
          responsive: true
        )
      ),
    'rounded-end': map-merge(
        map-get($utilities, 'rounded-end'),
        (
          responsive: true
        )
      ),
    'rounded-top': map-merge(
        map-get($utilities, 'rounded-top'),
        (
          responsive: true
        )
      ),
    'rounded-bottom': map-merge(
        map-get($utilities, 'rounded-bottom'),
        (
          responsive: true
        )
      )
  )
);

div.form-control {
  @each $state, $data in $form-validation-states {
    @include form-validation-state-selector($state) {
      @if $enable-validation-icons {
        padding-right: $input-height-inner;
        background-position: top $input-height-inner-quarter right $input-height-inner-quarter;
      }
    }
  }
}

.badge {
  @each $state, $data in $form-validation-states {
    @include form-validation-state-selector($state) {
      border: 1.5px solid map-get($data, 'border-color');
      color: map-get($data, 'color');
    }
  }
}

/* Enable responsive for text-break, text-break-all, text-wrap, text-nowrap, text-pre-wrap */
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    .text-#{$breakpoint}-break {
      word-wrap: break-word;
    }

    .text-#{$breakpoint}-break-all {
      word-break: break-all;
    }

    .text-#{$breakpoint}-wrap {
      white-space: normal;
    }

    .text-#{$breakpoint}-nowrap {
      white-space: nowrap;
    }

    .text-#{$breakpoint}-pre-wrap {
      white-space: pre-wrap;
    }
  }
}

/* Enable responsive for img-thumbnail */
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    .img-thumbnail-#{$breakpoint} {
      @include img-thumbnail();
    }
  }
}

/* Enable responsive for width sizes (w-25, w-50, w-75, w-100, w-auto) */
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    .w-#{$breakpoint}-25 {
      width: 25%;
    }

    .w-#{$breakpoint}-50 {
      width: 50%;
    }

    .w-#{$breakpoint}-75 {
      width: 75%;
    }

    .w-#{$breakpoint}-100 {
      width: 100%;
    }

    .w-#{$breakpoint}-auto {
      width: auto !important;
    }

    .w-#{$breakpoint}-unset {
      width: unset !important;
    }
  }
}

@import 'bootstrap/scss/utilities/api';

/* This is the spinner style for pending state icon */
.input-spinner {
  position: relative;
}

.input-spinner > .form-control ~ fa-icon {
  position: absolute;
  margin-top: 7px;
  margin-right: 10px;
  top: 0;
  right: 0;
}

.input-spinner > .form-control-sm ~ fa-icon {
  margin-top: 3px;
  margin-right: 5px;
}

/* Adds animations to the masonry layout component items */
.masonry-item {
  transition:
    top 0.4s ease-out,
    left 0.4s ease-out;
}

/* For no outline when click button */
.no-outline {
  outline-style: none !important;
  outline: none !important;
  box-shadow: none !important;
  border-color: transparent !important;
}

.no-outline:active {
  border-color: transparent !important;
}

.smaller {
  font-size: 0.75rem;
}

.sprotty svg {
  border: 0px !important;
}

/* For show cursor pointer when hover */
.pe-pointer {
  cursor: pointer;
}

/* For preserve proportions of non-square images
(anyway all images are going to be square because these were cropped before uploading) */
.profile-img {
  -o-object-fit: cover;
  object-fit: cover;
  -o-object-position: top;
  object-position: top;
  overflow: hidden;
}

/* For remove links underline */
a {
  text-decoration: none;
}

/* For put character counter on textarea and min-height for correct view */
.textarea-min-height {
  min-height: 5rem !important;
}

.textarea-count {
  margin-top: -25px;
  margin-right: 10px;
}

/* Big radio/check button */
.form-check-input-lg {
  width: 20px;
  height: 20px;
}

/* For do rows hover effect on non-table rows */
.row-hover > .row:not(.not-hover):hover {
  background-color: $table-hover-bg !important;
  color: $table-hover-color !important;
}

/* Used for overlay components, allows block that component and add some loading icon */
.overlay {
  position: absolute;
  z-index: 1;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
}

.overlay + * {
  filter: blur(0.1rem); //this blur the content behind the overlay
}

/* For disable content that is going to be updated */
.loading {
  pointer-events: none;
  filter: blur(0.1rem);
}

/* For remove dropdown arrow on dropdown toggle button */
.no-dropdown-arrow.dropdown-toggle::after {
  content: none;
}

/* Similar to input-group but the second button (or link) is inside the first*/
.input-button {
  position: relative;
}

.input-button > input {
  padding-right: 3rem;
}

.input-button.input-button-sm > input {
  padding-right: 2rem;
}

.input-button > button,
.input-button > a {
  position: absolute;
  right: 0;
  top: 0;
}

/* For apply form-control default size to non-input elements */
.form-control-md {
  min-height: calc(1.5em + 0.75rem + 2px);
}

/* Form controls of extra small size */
.form-control-xs {
  min-height: calc(1.12em + 0.375rem + 1px);
  padding: 0.1875rem 0.375rem;
  font-size: 0.65625rem;
  border-radius: 0.15rem;
}

.form-select-xs {
  padding-top: 0.1875rem;
  padding-bottom: 0.1875rem;
  padding-left: 0.375rem;
  font-size: 0.65625rem;
  border-radius: 0.15rem;
}

/* Button groups of extra small size */
.btn-group-xs > .btn {
  padding: 0.1875rem 0.375rem;
  font-size: 0.65625rem;
  // border-radius: 0.15rem;
}

/* For allow showing break lines (\n) */
.text-pre-wrap {
  white-space: pre-wrap;
}

.text-ellipsis {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Break text that overflows by characters instead of words */
.text-break-all {
  word-break: break-all;
}

.text-break-word {
  word-break: break-word;
}

.text-hyphens {
  hyphens: auto;
}

:not(a).hoverable:hover {
  background-color: $table-hover-bg !important;
}

a.hoverable {
  opacity: 0.9;
}

a.hoverable:hover {
  opacity: 1;
}

/* Base style for izitoasts */
.iziToast-config {
  word-break: break-word;
}

.iziToast-icon-config {
  font-size: 17px !important;
}

/* Add a top arrow to a dropdown-menu for looks like a popover */
.dropdown-menu-arrow:before {
  right: 15px;
  top: -16px;
  border: 8px solid #0000;
  border-bottom: 8px solid $border-color-translucent;
}

html[data-bs-theme='dark'] .dropdown-menu-arrow:before {
  border-bottom: 8px solid $border-color-translucent-dark;
}

.dropdown-menu-arrow:after {
  right: 16px;
  top: -14px;
  border: 7px solid #0000;
  border-bottom: 7px solid $body-bg;
}

html[data-bs-theme='dark'] .dropdown-menu-arrow:after {
  border-bottom: 7px solid $body-bg-dark;
}

.dropdown-menu-arrow:before,
.dropdown-menu-arrow:after {
  content: '';
  left: auto;
  display: inline-block;
  position: absolute;
}

.dropdown-toggle-no-arrow.dropdown-toggle::after {
  display: none;
}

// scrollbar styling
::-webkit-scrollbar {
  width: 2px;
  height: 2px;
}

::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0);
  border-radius: 2px;
}

::-webkit-scrollbar-thumb {
  background: rgba($black, 0.5);
  border-radius: 2px;
}

html[data-bs-theme='dark'] ::-webkit-scrollbar-thumb {
  background: rgba($white, 0.5);
}
